


Some text to debug visually the obs_swat_push_broom

if sm.cnt_epoch == 1:
    fig = plt.figure(figsize=(10, 10))
    ax = plt.axes(projection='3d')
    ax.scatter3D(satellite.pos_ecf[0] / 1e3, satellite.pos_ecf[1] / 1e3, satellite.pos_ecf[2] / 1e3, color='blue')
    # for u in sm.users:
    #     ax.scatter3D(u.posvel_ecf[0] / 1e3, u.posvel_ecf[1] / 1e3, u.posvel_ecf[2] / 1e3, color='r')
    u, v = np.mgrid[0:2 * np.pi:20j, 0:np.pi:10j]
    x = R_EARTH / 1e3 * np.cos(u) * np.sin(v)
    y = R_EARTH / 1e3 * np.sin(u) * np.sin(v)
    z = R_EARTH / 1e3 * np.cos(v)
    ax.plot_wireframe(x, y, z, color="r")
    ax.scatter3D(self.p1[0] / 1e3, self.p1[1] / 1e3, self.p1[2] / 1e3, color='g')
    ax.scatter3D(self.p2[0] / 1e3, self.p2[1] / 1e3, self.p2[2] / 1e3, color='b')
    ax.scatter3D(self.p3[0] / 1e3, self.p3[1] / 1e3, self.p3[2] / 1e3, color='k')
    ax.scatter3D(self.p4[0] / 1e3, self.p4[1] / 1e3, self.p4[2] / 1e3, color='c')
    ax.scatter3D(self.planes[0].n[0] * 4e3, self.planes[0].n[1] * 4e3, self.planes[0].n[2] * 4e3, color='green')
    ax.scatter3D(self.planes[1].n[0] * 4e3, self.planes[1].n[1] * 4e3, self.planes[1].n[2] * 4e3, color='blue')
    ax.scatter3D(self.planes[2].n[0] * 4e3, self.planes[2].n[1] * 4e3, self.planes[2].n[2] * 4e3, color='black')
    ax.scatter3D(self.planes[3].n[0] * 4e3, self.planes[3].n[1] * 4e3, self.planes[3].n[2] * 4e3, color='cyan')
    plt.show()

# Old way for conical scanner

    def read_config(self, node):
        if node.find('OrthoViewLatitude') is not None:
            self.ortho_view_latitude = float(node.find('OrthoViewLatitude').text)

    def before_loop(self, sm):
        for satellite in sm.satellites:
            for idx, constellation in enumerate(sm.constellations):
                if satellite.constellation_id == constellation.constellation_id:
                    idx_found = idx
            const = sm.constellations[idx_found]
            sat_altitude = satellite.kepler.semi_major_axis - R_EARTH
            if const.obs_swath_stop is not None:  # if swath defined by swath length rather than incidence
                satellite.obs_incl_angle_stop = misc_fn.incl_from_swath(
                    const.obs_swath_stop, R_EARTH, sat_altitude)
            else:
                satellite.obs_incl_angle_stop = const.obs_incl_angle_stop
            alfa_critical = asin(R_EARTH / (R_EARTH + sat_altitude))  # If incidence angle shooting off Earth -> error
            if satellite.obs_incl_angle_stop > alfa_critical:
                ls.logger.error(f'Inclination angle stop: {degrees(satellite.obs_incl_angle_stop)} ' +
                                f'larger than critical angle {round(degrees(alfa_critical),1)}')
                exit()
        for user in sm.users:
            user.metric = np.zeros(sm.num_epoch)
            user.norm_ecf = norm(user.posvel_ecf[0:3])

    def in_loop(self, sm):
        # Computed by angle distance point and satellite ground point
        # Just 10% faster if done by checking normal euclidean distance
        for satellite in sm.satellites:
            norm_sat = norm(satellite.posvel_ecf[0:3])
            satellite.det_lla()
            sat_altitude = norm_sat - misc_fn.earth_radius_lat(satellite.lla[0])
            radius = misc_fn.det_swath_radius(sat_altitude, satellite.obs_incl_angle_stop)
            earth_angle_swath = radians(misc_fn.earth_angle_beta_deg(radius))
            for user in sm.users:
                angle_user_zenith = misc_fn.angle_two_vectors(user.posvel_ecf[0:3], satellite.posvel_ecf[0:3],
                                                              user.norm_ecf, norm_sat)
                if angle_user_zenith < earth_angle_swath:
                    user.metric[sm.cnt_epoch] = 1  # Within swath


                    np.diff(np.where(np.diff(user.metric)!=0))

# To find the common revisit of C and L
# But way too slow
num_users = len(lats)
num_epochs = user_metric_a.shape[1]
print(num_epochs)
print('Computing revisit between a and b')
plot_points = np.zeros((len(lats), 3))
for idx_user in range(len(lats)):
    if idx_user % 100 == 0:
        print(f'User swath coverage {idx_user} of {num_users}')
    if user_metric_a[idx_user, :].any():  # Any value bigger than 0
        swaths_idx_end = np.asarray(np.where(np.diff(user_metric_a[idx_user, :])==-1.0)).flatten()
        gaps = []
        #print(swaths_idx_end)
        for swath_idx_end in swaths_idx_end:
            #print(swath_idx_end)
            found_b = False
            cnt = 0
            while not found_b:
                if swath_idx_end+cnt < num_epochs:
                    if user_metric_b[idx_user, swath_idx_end+cnt] == 1:
                        found_b == True
                        gaps.append(cnt)
                    cnt=cnt+1
                else:
                    found_b = True
        metric = np.mean(gaps)
        plot_points[idx_user, :] = [lons[idx_user], lats[idx_user], metric]
plot_points = plot_points[~np.all(plot_points == 0, axis=1)]  # Clean up empty rows



# Define user grid shapefile
import ast
from shapely.geometry import Point, Polygon
import numpy as np
from geopandas import GeoSeries, GeoDataFrame

import matplotlib
matplotlib.use("TkAgg")
from matplotlib import pyplot as plt


# Get the shape-file for NYC
poly = GeoDataFrame.from_file('../input/example_shp_files/ne_10m_admin_0_countries.shp')
poly = poly[poly.ADMIN=='Denmark']['geometry'].iloc[0]
# plt.rcParams["figure.figsize"] = [8,6]
# poly.plot()
# plt.show()
#print(poly.head())
# print(poly['geometry'].iloc[0])
# print(poly.bounds)

# print(poly.iloc[100])

# # Create a Polygon
# coords = list(ast.literal_eval('(-50,-50),(-50,30),(50,40),(50,-50)'))
# poly = Polygon(coords)
# print(poly.bounds)

# Create a grid
lon_step = .1
lat_step = .1
xmin, xmax, ymin, ymax = poly.bounds[0], poly.bounds[2], poly.bounds[1], poly.bounds[3]
print(xmin, xmax, ymin, ymax )
xx, yy = np.meshgrid(np.arange(xmin,xmax,lon_step), np.arange(ymin,ymax,lat_step))
xc = xx.flatten()
yc = yy.flatten()

# Chck the ones within the polygon
pts = GeoSeries([Point(x, y) for x, y in zip(xc, yc)])
in_map =  np.array([pts.within(poly)]).sum(axis=0)
pts = GeoSeries([val for pos,val in enumerate(pts) if in_map[pos]])

plt.rcParams["figure.figsize"] = [8,6]
pts.plot(markersize=1)
plt.show()



antarctic

(-180.0, -71.60),(-149.02, -67.55),(-124.68, -71.96),(-95.41, -73.80),(-71.44, -69.75),(-57.70, -66.81),(-55.93, -68.65),(-28.44, -62.76),(-21.03, -64.23),(10.35, -61.66),(27.98, -64.60),(50.55, -66.44),(72.76, -65.71),(79.81, -63.87),(129.54, -69.75),(157.75, -69.39),(179.61, -71.23),(180.0, -90.37),(-180.0, -90.37)

arctic

(-180.0, 55.77),(-164.07, 56.50),(-165.50, 67.91),(-128.48, 69.39),(-122.83, 65.71),(-106.61, 64.60),(-95.34, 69.02),(-95.66, 56.50),(-82.61, 49.88),(-74.51, 56.87),(-64.64, 57.24),(-56.52, 54.66),(-22.32, 56.13),(-17.39, 59.08),(-5.41, 60.92),(5.50, 70.86),(30.88, 75.28),(41.12, 69.75),(39.01, 64.23),(62.27, 69.02),(66.16, 64.60),(72.15, 64.60),(79.19, 71.60),(97.52, 77.48),(107.39, 75.64),(110.57, 71.96),(159.23, 71.23),(168.05, 68.65),(178.98, 68.65),(180.0, 90.00),(-180.0, 89.63)

americas

(-165.51, 70.12),(-166.54, 60.18),(-159.13, 57.61),(-174.28, 51.72),(-154.55, 56.13),(-143.27, 59.45),(-140.08, 52.09),(-130.90, 45.46),(-128.77, 36.99),(-121.34, 24.48),(-106.16, 11.96),(-89.57, 5.34),(-79.34, 2.76),(-80.38, -4.23),(-79.66, -14.17),(-72.59, -23.74),(-72.92, -36.63),(-76.41, -55.40),(-74.63, -62.76),(-68.28, -64.60),(-59.47, -61.29),(-68.64, -59.82),(-64.41, -57.24),(-60.21, -45.46),(-52.11, -39.94),(-42.95, -32.94),(-35.92, -24.48),(-32.07, -6.81),(-49.00, -4.97),(-52.19, 4.23),(-60.30, 4.97),(-57.15, 16.01),(-72.33, 23.37),(-75.51, 29.26),(-62.12, 33.68),(-61.78, 39.94),(-51.21, 41.04),(-44.51, 44.36),(-39.25, 56.13),(-61.46, 56.13),(-76.64, 62.39),(-81.91, 52.82),(-96.37, 57.98),(-87.57, 66.44),(-93.93, 69.75),(-118.61, 69.39),(-129.54, 70.86),(-147.88, 70.86)

eurasia

(-36.75, 42.15),(-37.44, 35.15),(-23.68, 28.53),(-21.88, 9.39),(-17.28, 0.92),(-0.35, -4.23),(6.71, -4.60),(8.48, -11.23),(12.72, -15.28),(10.97, -23.01),(19.13, -46.56),(31.81, -41.04),(38.14, -33.31),(46.60, -31.47),(55.06, -27.79),(49.04, -17.48),(40.58, -17.12),(39.51, -10.12),(50.43, -3.50),(54.63, 9.39),(55.68, 14.54),(63.07, 22.27),(72.25, 15.64),(76.51, 3.50),(80.39, 1.66),(85.65, 16.01),(93.41, 11.96),(93.08, 1.29),(103.69, -11.96),(121.32, -15.64),(128.38, -16.01),(125.21, -20.80),(116.41, -27.06),(113.24, -30.37),(115.73, -41.78),(132.30, -38.47),(143.24, -46.20),(146.08, -51.72),(154.51, -37.73),(152.37, -27.06),(146.02, -21.53),(155.51, -9.02),(153.39, -6.81),(131.17, -4.23),(121.26, 17.12),(110.72, -2.76),(104.72, 0.55),(105.77, 5.71),(109.28, 9.75),(107.86, 16.38),(119.13, 21.53),(128.65, 25.95),(139.56, 33.68),(142.37, 41.41),(144.47, 50.25),(144.11, 53.56),(136.35, 54.29),(143.04, 58.34),(155.38, 58.71),(155.04, 49.88),(165.25, 58.71),(179.35, 62.39),(180.04, 70.12),(161.35, 69.39),(140.54, 72.70),(109.16, 72.33),(108.80, 76.01),(87.30, 75.28),(79.19, 71.23),(72.50, 66.44),(63.69, 64.97),(59.45, 69.02),(43.59, 65.71),(39.01, 64.60),(38.64, 74.17),(28.05, 81.53),(11.48, 81.17),(12.90, 75.64),(1.63, 69.39),(-6.82, 62.76),(-15.63, 58.34),(-16.68, 52.82),(-12.07, 41.78),(-14.18, 37.36),(-22.30, 41.78)

oceans

(-178.52, 56.13),(-141.15, 57.61),(-133.02, 46.20),(-124.17, 27.79),(-107.92, 11.23),(-80.05, 3.50),(-81.08, -8.65),(-74.00, -21.90),(-71.52, -28.90),(-76.05, -56.87),(-68.63, -62.39),(-65.48, -53.19),(-54.92, -42.52),(-36.97, -27.42),(-34.18, -9.39),(-51.13, 3.13),(-57.50, 13.80),(-75.86, 25.58),(-74.47, 34.79),(-60.01, 34.79),(-56.85, 41.78),(-47.69, 43.99),(-40.66, 55.77),(-17.04, 58.34),(-14.53, 38.83),(-21.24, 42.15),(-36.40, 42.52),(-38.15, 35.89),(-26.86, 30.74),(-21.52, 6.44),(-9.87, -3.50),(6.00, -4.23),(11.66, -14.91),(16.30, -39.94),(18.08, -47.67),(30.05, -41.78),(34.62, -34.42),(46.60, -31.47),(62.82, -28.90),(61.74, -19.33),(40.57, -13.44),(39.15, -8.28),(51.83, -2.02),(59.19, 21.53),(72.96, 14.54),(77.56, 4.23),(87.06, 16.38),(92.01, 10.49),(96.62, -4.60),(119.56, -15.64),(129.43, -14.91),(121.34, -23.01),(112.18, -30.00),(115.38, -41.78),(130.89, -39.20),(143.60, -45.83),(148.19, -51.35),(156.27, -33.68),(146.72, -22.27),(154.81, -11.96),(131.88, -3.87),(120.20, 18.59),(121.93, 32.94),(141.30, 47.30),(139.52, 55.03),(162.78, 57.98),(179.00, 62.02),(180.67, -71.60),(141.88, -69.39),(102.03, -66.44),(78.40, -64.23),(29.39, -66.07),(12.11, -60.55),(-27.73, -63.13),(-87.30, -72.33),(-116.57, -73.07),(-149.72, -67.18),(-180.04, -71.23)

Europe

(-24.11, 65.34),(-15.97, 52.45),(-14.89, 42.52),(-15.59, 37.36),(-20.89, 42.52),(-30.06, 43.62),(-36.40, 41.78),(-38.86, 35.15),(-27.21, 31.10),(-20.50, 23.74),(-7.47, 33.68),(6.98, 34.42),(19.68, 31.10),(30.26, 33.68),(39.77, 37.73),(44.35, 40.67),(38.70, 45.09),(37.63, 49.51),(27.04, 57.61),(33.37, 63.87),(39.71, 65.71),(36.88, 72.70),(31.58, 78.22),(13.60, 75.64),(1.28, 68.65),(-9.29, 62.02),(-14.59, 66.81)